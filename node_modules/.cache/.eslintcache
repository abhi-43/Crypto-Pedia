[{"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\index.js":"1","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\App.js":"2","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\Header.js":"3","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Pages\\HomePage.js":"4","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Pages\\CoinPage.js":"5","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\CryptoContext.js":"6","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\Banner\\Banner.js":"7","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\Banner\\Carousel.js":"8","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\config\\api.js":"9","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\CoinTable.js":"10","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\CoinInfo.js":"11","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\config\\data.js":"12","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\SelectButton.js":"13","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\Authentication\\AuthModal.js":"14","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\Authentication\\Login.js":"15","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\Authentication\\Signup.js":"16","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\firebase.js":"17","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\config\\firebaseConfig.js":"18","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\Alert.js":"19","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\Authentication\\UserSideBar.js":"20","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\ErrorBoundary.js":"21"},{"size":361,"mtime":1653420304302,"results":"22","hashOfConfig":"23"},{"size":936,"mtime":1653554801186,"results":"24","hashOfConfig":"23"},{"size":1596,"mtime":1653511520792,"results":"25","hashOfConfig":"23"},{"size":576,"mtime":1653553941194,"results":"26","hashOfConfig":"23"},{"size":5365,"mtime":1653548849920,"results":"27","hashOfConfig":"23"},{"size":2128,"mtime":1653548702889,"results":"28","hashOfConfig":"23"},{"size":1351,"mtime":1653635874155,"results":"29","hashOfConfig":"23"},{"size":2723,"mtime":1653423350758,"results":"30","hashOfConfig":"23"},{"size":628,"mtime":1653417784333,"results":"31","hashOfConfig":"23"},{"size":6683,"mtime":1653493778104,"results":"32","hashOfConfig":"23"},{"size":3421,"mtime":1653488686552,"results":"33","hashOfConfig":"23"},{"size":265,"mtime":1653482626976,"results":"34","hashOfConfig":"23"},{"size":805,"mtime":1653485775970,"results":"35","hashOfConfig":"23"},{"size":3428,"mtime":1653513769205,"results":"36","hashOfConfig":"23"},{"size":1854,"mtime":1653510562226,"results":"37","hashOfConfig":"23"},{"size":2201,"mtime":1653508753737,"results":"38","hashOfConfig":"23"},{"size":348,"mtime":1653504059587,"results":"39","hashOfConfig":"23"},{"size":365,"mtime":1653502937762,"results":"40","hashOfConfig":"23"},{"size":726,"mtime":1653510067007,"results":"41","hashOfConfig":"23"},{"size":5424,"mtime":1653549509893,"results":"42","hashOfConfig":"23"},{"size":298,"mtime":1653553764272,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1ggdf8n",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\index.js",[],["91","92"],"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\App.js",[],"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\Header.js",[],"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Pages\\HomePage.js",[],"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Pages\\CoinPage.js",["93"],"import { Button, LinearProgress, makeStyles, Typography } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport { doc, setDoc } from 'firebase/firestore';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport CoinInfo from '../Components/CoinInfo';\r\nimport { numberWithCommas } from '../Components/CoinTable';\r\nimport { SingleCoin } from '../config/api';\r\nimport { CryptoState } from '../CryptoContext';\r\nimport { db } from '../firebase';\r\n\r\n\r\nconst CoinPage = () => {\r\n\r\n  const { id } = useParams();\r\n  const [coin, setCoin] = useState();\r\n\r\n  const { currency, symbol, user, watchlist, setAlert} = CryptoState();\r\n\r\n  const fetchCoin = async() => {\r\n    const { data } = await axios.get(SingleCoin(id));\r\n\r\n    setCoin(data);\r\n  };\r\n\r\n  const inWatchList = watchlist.includes(coin?.id);\r\n\r\n  const addToWatchList = async () => {\r\n    const coinRef = doc(db, \"watchlist\", user.uid);\r\n\r\n    try{\r\n      await setDoc(coinRef,\r\n        {coins: watchlist ? [...watchlist,coin.id] : [coin.id]\r\n    }, { merge: true});\r\n\r\n    setAlert({\r\n      open: true,\r\n      message: `${coin.name} Added to the Watchlist !`,\r\n      type: \"success\",\r\n    });\r\n  }\r\n    catch(error) {\r\n      setAlert({\r\n        open: true,\r\n        message: error.message,\r\n        type: \"error\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeFromWatchlist = async () => {\r\n    const coinRef = doc(db, \"watchlist\", user.uid);\r\n    try {\r\n      await setDoc(\r\n        coinRef,\r\n        { coins: watchlist.filter((wish) => wish !== coin?.id) },\r\n        { merge: true }\r\n      );\r\n      setAlert({\r\n        open: true,\r\n        message: `${coin.name} Removed from the Watchlist !`,\r\n        type: \"success\",\r\n      });\r\n    } catch (error) {\r\n      setAlert({\r\n        open: true,\r\n        message: error.message,\r\n        type: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCoin();\r\n  }, []);\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    container: {\r\n      display: \"flex\",\r\n      [theme.breakpoints.down(\"md\")]: {\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n      },\r\n    },\r\n    sidebar: {\r\n      width: \"30%\",\r\n      [theme.breakpoints.down(\"md\")]: {\r\n        width: \"100%\",\r\n      },\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n      marginTop: 25,\r\n      borderRight: \"2px solid grey\",\r\n    },\r\n    heading: {\r\n      fontWeight: \"bold\",\r\n      marginBottom: 20,\r\n      fontFamily: \"Montserrat\",\r\n    },\r\n    description: {\r\n      width: \"100%\",\r\n      fontFamily: \"Montserrat\",\r\n      padding: 25,\r\n      paddingBottom: 15,\r\n      paddingTop: 0,\r\n      textAlign: \"justify\",\r\n    },\r\n    marketData: {\r\n      alignSelf: \"start\",\r\n      padding: 25,\r\n      paddingTop: 10,\r\n      width: \"100%\",\r\n      [theme.breakpoints.down(\"md\")]: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n      },\r\n      [theme.breakpoints.down(\"xs\")]: {\r\n        alignItems: \"start\",\r\n      },\r\n    },\r\n  }));\r\n  \r\n  const classes = useStyles();\r\n\r\n  if (!coin) return <LinearProgress style={{ backgroundColor: \"gold\" }} />\r\n\r\n\r\n  return ( \r\n    <div className={classes.container}>\r\n\r\n      <div className={classes.sidebar}>\r\n        <img src={coin?.image.large} alt={coin?.name} height=\"200\" style={{ marginBottom: 20 }} />\r\n      \r\n        <Typography variant=\"h3\" className={classes.heading}>\r\n          {coin?.name}\r\n        </Typography>\r\n\r\n        <Typography variant=\"subtitle1\" className={classes.description}>\r\n          <div dangerouslySetInnerHTML={{__html: coin?.description.en.split(\". \")[0]}} />\r\n        </Typography>\r\n\r\n        <div className={classes.marketData}>\r\n\r\n            <span style={{ display: \"flex \"}}>\r\n              <Typography variant=\"h5\" className={classes.heading}>Rank :</Typography>\r\n              &nbsp;&nbsp;&nbsp;\r\n              <Typography variant=\"h5\" style={{ fontFamily: \"Montserrat\" }}>\r\n                  {numberWithCommas(coin?.market_cap_rank)}\r\n              </Typography>\r\n            </span>\r\n\r\n            <span style={{ display: \"flex \"}}>\r\n              <Typography variant=\"h5\" className={classes.heading}>Current Price :</Typography>\r\n              &nbsp;&nbsp;&nbsp;\r\n              <Typography variant=\"h5\" style={{ fontFamily: \"Montserrat\" }}>\r\n                  {symbol}{\" \"}{numberWithCommas(coin?.market_data.current_price[currency.toLowerCase()])}\r\n              </Typography>\r\n            </span>\r\n\r\n            <span style={{ display: \"flex \"}}>\r\n              <Typography variant=\"h5\" className={classes.heading}>Market Cap :</Typography>\r\n              &nbsp;&nbsp;&nbsp;\r\n              <Typography variant=\"h5\" style={{ fontFamily: \"Montserrat\" }}>\r\n                  {symbol}{\" \"}{numberWithCommas(coin?.market_data.market_cap[currency.toLowerCase()].toString().slice(0, -6))}&nbsp;M\r\n              </Typography>\r\n            </span>\r\n\r\n            {user && (<Button variant=\"outlined\" style={{ width: \"100%\", height: 40, backgroundColor: inWatchList ? \"#ff0000\" : \"#EEBC1D\"}} onClick={inWatchList ? removeFromWatchlist : addToWatchList}>\r\n               {inWatchList ? \"Remove from WatchList\" : \"Add to WatchList\"} \r\n            </Button>)}\r\n        </div>\r\n      </div>\r\n\r\n      <CoinInfo coin = {coin}/>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CoinPage;","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\CryptoContext.js",[],"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\Banner\\Banner.js",[],"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\Banner\\Carousel.js",["94"],"import { makeStyles } from '@material-ui/core';\r\nimport axios from \"axios\";\r\nimport AliceCarousel from \"react-alice-carousel\";\r\nimport { Link } from \"react-router-dom\";\r\nimport React, { useEffect, useState } from 'react'\r\nimport { CryptoState } from '../../CryptoContext';\r\nimport { TrendingCoins } from '../../config/api'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    carousel: {\r\n        height: \"50%\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n    },\r\n    carouselItem: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        cursor: \"pointer\",\r\n        textTransform: \"uppercase\",\r\n        color: \"white\",\r\n      },\r\n}));\r\n\r\nexport function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\nconst Carousel = () => {\r\n    const [trending, setTrending] = useState([]);\r\n    const classes = useStyles();\r\n\r\n    const { currency, symbol } = CryptoState();\r\n\r\n    const fetchTrendingCoins = async() => {\r\n        const { data } = await axios.get(TrendingCoins(currency));\r\n\r\n        setTrending(data);\r\n    };\r\n\r\n    console.log(trending);\r\n\r\n    useEffect(() => {\r\n        fetchTrendingCoins();\r\n    }, [currency]);\r\n\r\n    const items = trending.map((coin) => {\r\n        let profit = coin.price_change_percentage_24h >=0;\r\n\r\n        return (\r\n            <Link className={classes.carouselItem} to={`/coins/${coin.id}`}>\r\n                <img \r\n                    src={coin?.image}\r\n                    alt={coin.name}\r\n                    height= \"80\"\r\n                    style={{ marginBottom: 10}}\r\n                    />\r\n\r\n                <span>{coin?.symbol}\r\n                    &nbsp;\r\n                    <span style={{ color: profit > 0 ? \"rgb(14, 203, 129)\" : \"red\", fontWeight: 500}}>\r\n                        {profit && \"+\"} {coin?.price_change_percentage_24h?.toFixed(2)}%\r\n                    </span>\r\n                </span>\r\n\r\n                <span style={{ fontSize: 22, fontWeight: 500 }}>\r\n                 {symbol}{numberWithCommas(coin?.current_price.toFixed(2))}\r\n                </span>\r\n            </Link>\r\n            );\r\n    })\r\n\r\n    const responsive = {\r\n        0: {\r\n            items: 2,\r\n        },\r\n        512: {\r\n            items: 4,\r\n        },\r\n    };\r\n\r\n  return (\r\n    <div className={classes.carousel}>\r\n        <AliceCarousel\r\n            mouseTracking\r\n            infinite\r\n            autoPlayInterval={1500}\r\n            animationDuration={1500}\r\n            disableDotsControls\r\n            disableButtonsControls\r\n            responsive={responsive}\r\n            items={items}\r\n            autoPlay\r\n        />\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Carousel","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\config\\api.js",[],"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\CoinTable.js",["95","96","97"],"import { Container, createTheme, LinearProgress, makeStyles, TableBody, TableCell, TableContainer, TableHead, Paper, TableRow, TextField, ThemeProvider, Typography } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport axios from 'axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { CoinList } from '../config/api';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { CryptoState } from '../CryptoContext';\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\n\r\nexport function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n  \r\n  export default function CoinsTable() {\r\n   \r\n    const [search, setSearch] = useState(\"\");\r\n    const [page, setPage] = useState(1);\r\n  \r\n    const { currency, symbol, coins, loading, fetchCoins } = CryptoState();\r\n  \r\n    const useStyles = makeStyles({\r\n      row: {\r\n        backgroundColor: \"#16171a\",\r\n        cursor: \"pointer\",\r\n        \"&:hover\": {\r\n          backgroundColor: \"#131111\",\r\n        },\r\n        fontFamily: \"Montserrat\",\r\n      },\r\n      pagination: {\r\n        \"& .MuiPaginationItem-root\": {\r\n          color: \"gold\",\r\n        },\r\n      },\r\n    });\r\n  \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n  \r\n    const darkTheme = createTheme({\r\n      palette: {\r\n        primary: {\r\n          main: \"#fff\",\r\n        },\r\n        type: \"dark\",\r\n      },\r\n    });\r\n  \r\n \r\n  \r\n    useEffect(() => {\r\n      fetchCoins();\r\n    }, [currency]);\r\n  \r\n    const handleSearch = () => {\r\n      return coins.filter(\r\n        (coin) =>\r\n          coin.name.toLowerCase().includes(search) ||\r\n          coin.symbol.toLowerCase().includes(search)\r\n      );\r\n    };\r\n  \r\n    return (\r\n      <ThemeProvider theme={darkTheme}>\r\n        <Container style={{ textAlign: \"center\" }}>\r\n          <Typography\r\n            variant=\"h4\"\r\n            style={{ margin: 18, fontFamily: \"Montserrat\" }}\r\n          >\r\n            Cryptocurrency Prices by Market Cap\r\n          </Typography>\r\n          <TextField\r\n            label=\"Search For a Crypto Currency..\"\r\n            variant=\"outlined\"\r\n            style={{ marginBottom: 20, width: \"100%\" }}\r\n            onChange={(e) => setSearch(e.target.value)}\r\n          />\r\n          <TableContainer component={Paper}>\r\n            {loading ? (\r\n              <LinearProgress style={{ backgroundColor: \"gold\" }} />\r\n            ) : (\r\n              <Table aria-label=\"simple table\">\r\n                <TableHead style={{ backgroundColor: \"#EEBC1D\" }}>\r\n                  <TableRow>\r\n                    {[\"Coin\", \"Price\", \"24h Change\", \"Market Cap\"].map((head) => (\r\n                      <TableCell\r\n                        style={{\r\n                          color: \"black\",\r\n                          fontWeight: \"700\",\r\n                          fontFamily: \"Montserrat\",\r\n                        }}\r\n                        key={head}\r\n                        align={head === \"Coin\" ? \"\" : \"right\"}\r\n                      >\r\n                        {head}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n  \r\n                <TableBody>\r\n                  {handleSearch()\r\n                    .slice((page - 1) * 10, (page - 1) * 10 + 10)\r\n                    .map((row) => {\r\n                      const profit = row.price_change_percentage_24h > 0;\r\n                      return (\r\n                        <TableRow\r\n                          onClick={() => history.push(`/coins/${row.id}`)}\r\n                          className={classes.row}\r\n                          key={row.name}\r\n                        >\r\n                          <TableCell\r\n                            component=\"th\"\r\n                            scope=\"row\"\r\n                            style={{\r\n                              display: \"flex\",\r\n                              gap: 15,\r\n                            }}\r\n                          >\r\n                            <img\r\n                              src={row?.image}\r\n                              alt={row.name}\r\n                              height=\"50\"\r\n                              style={{ marginBottom: 10 }}\r\n                            />\r\n                            <div\r\n                              style={{ display: \"flex\", flexDirection: \"column\" }}\r\n                            >\r\n                              <span\r\n                                style={{\r\n                                  textTransform: \"uppercase\",\r\n                                  fontSize: 22,\r\n                                }}\r\n                              >\r\n                                {row.symbol}\r\n                              </span>\r\n                              <span style={{ color: \"darkgrey\" }}>\r\n                                {row.name}\r\n                              </span>\r\n                            </div>\r\n                          </TableCell>\r\n                          <TableCell align=\"right\">\r\n                            {symbol}{\" \"}\r\n                            {numberWithCommas(row.current_price.toFixed(2))}\r\n                          </TableCell>\r\n                          <TableCell\r\n                            align=\"right\"\r\n                            style={{\r\n                              color: profit > 0 ? \"rgb(14, 203, 129)\" : \"red\",\r\n                              fontWeight: 500,\r\n                            }}\r\n                          >\r\n                            {profit && \"+\"}\r\n                            {row.price_change_percentage_24h.toFixed(2)}%\r\n                          </TableCell>\r\n                          <TableCell align=\"right\">\r\n                            {symbol}{\" \"}\r\n                            {numberWithCommas(\r\n                              row.market_cap.toString().slice(0, -6)\r\n                            )}\r\n                            &nbsp;M\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                </TableBody>\r\n              </Table>\r\n            )}\r\n          </TableContainer>\r\n  \r\n          \r\n          <Pagination\r\n            count={(handleSearch()?.length / 10).toFixed(0)}\r\n            style={{\r\n              padding: 20,\r\n              width: \"100%\",\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n            }}\r\n            classes={{ ul: classes.pagination }}\r\n            onChange={(_, value) => {\r\n              setPage(value);\r\n              window.scroll(0, 450);\r\n            }}\r\n          />\r\n        </Container>\r\n      </ThemeProvider>\r\n    );\r\n  }","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\CoinInfo.js",["98","99"],"import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { HistoricalChart } from '../config/api';\r\nimport { CryptoState } from '../CryptoContext';\r\nimport {CircularProgress, createTheme, makeStyles, ThemeProvider,} from \"@material-ui/core\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport SelectButton from \"./SelectButton\";\r\nimport { chartDays } from \"../config/data\";\r\n\r\n\r\nconst CoinInfo = ( { coin }) => {\r\n\r\n    const [historicalData, setHistoricalData] = useState();\r\n    const [days, setDays] = useState(1);\r\n    const [flag,setFlag] = useState(false);\r\n\r\n    const { currency } = CryptoState();\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        container: {\r\n          width: \"75%\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          marginTop: 25,\r\n          padding: 40,\r\n          [theme.breakpoints.down(\"md\")]: {\r\n            width: \"100%\",\r\n            marginTop: 0,\r\n            padding: 20,\r\n            paddingTop: 0,\r\n          },\r\n        },\r\n      }));\r\n    \r\n      const classes = useStyles();\r\n\r\n    const fetchHistoricData = async () => {\r\n        const { data } = await axios.get(HistoricalChart(coin.id, days, currency)); \r\n        setFlag(true);\r\n        setHistoricalData(data.prices);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchHistoricData();\r\n    },[days]);\r\n\r\n    const darkTheme = createTheme({\r\n        palette: {\r\n          primary: {\r\n            main: \"#fff\",\r\n          },\r\n          type: \"dark\",\r\n        },\r\n      });\r\n    \r\n    \r\n\r\n  return (\r\n    <ThemeProvider theme={darkTheme}>\r\n    <div className={classes.container}>\r\n\r\n      {\r\n        !historicalData  ? (\r\n            <CircularProgress style={{ color: \"gold\" }} size={250} thickness={1}/>\r\n            ) : (\r\n        <>\r\n          <Line\r\n            data={{\r\n              labels: historicalData.map((coin) => {\r\n                let date = new Date(coin[0]);\r\n                let time =\r\n                  date.getHours() > 12\r\n                    ? `${date.getHours() - 12}:${date.getMinutes()} PM`\r\n                    : `${date.getHours()}:${date.getMinutes()} AM`;\r\n                return days === 1 ? time : date.toLocaleDateString();\r\n              }),\r\n\r\n              datasets: [\r\n                {\r\n                  data: historicalData.map((coin) => coin[1]),\r\n                  label: `Price ( Past ${days} Days ) in ${currency}`,\r\n                  borderColor: \"#EEBC1D\",\r\n                },\r\n              ],\r\n            }}\r\n            options={{\r\n              elements: {\r\n                point: {\r\n                  radius: 1,\r\n                },\r\n              },\r\n            }}\r\n          />\r\n\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              marginTop: 20,\r\n              justifyContent: \"space-around\",\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            {chartDays.map((day) => (\r\n              <SelectButton\r\n                key={day.value}\r\n                onClick={() => {setDays(day.value);\r\n                  setFlag(false);\r\n                }}\r\n                selected={day.value === days}\r\n              >\r\n                {day.label}\r\n              </SelectButton>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default CoinInfo;","C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\config\\data.js",[],"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\SelectButton.js",[],"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\Authentication\\AuthModal.js",[],"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\Authentication\\Login.js",[],"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\Authentication\\Signup.js",[],"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\firebase.js",[],"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\config\\firebaseConfig.js",[],"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\Alert.js",[],"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\Authentication\\UserSideBar.js",[],"C:\\Users\\abhis\\Documents\\WebDev\\CryptoPedia\\crypto-pedia\\src\\Components\\ErrorBoundary.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":75,"column":6,"nodeType":"106","endLine":75,"endColumn":8,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"108","line":46,"column":8,"nodeType":"106","endLine":46,"endColumn":18,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":3,"column":8,"nodeType":"112","messageId":"113","endLine":3,"endColumn":13},{"ruleId":"110","severity":1,"message":"114","line":5,"column":10,"nodeType":"112","messageId":"113","endLine":5,"endColumn":18},{"ruleId":"104","severity":1,"message":"115","line":53,"column":8,"nodeType":"106","endLine":53,"endColumn":18,"suggestions":"116"},{"ruleId":"110","severity":1,"message":"117","line":15,"column":12,"nodeType":"112","messageId":"113","endLine":15,"endColumn":16},{"ruleId":"104","severity":1,"message":"118","line":47,"column":7,"nodeType":"106","endLine":47,"endColumn":13,"suggestions":"119"},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCoin'. Either include it or remove the dependency array.","ArrayExpression",["122"],"React Hook useEffect has a missing dependency: 'fetchTrendingCoins'. Either include it or remove the dependency array.",["123"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'CoinList' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchCoins'. Either include it or remove the dependency array.",["124"],"'flag' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchHistoricData'. Either include it or remove the dependency array.",["125"],"no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [fetchCoin]",{"range":"134","text":"135"},"Update the dependencies array to be: [currency, fetchTrendingCoins]",{"range":"136","text":"137"},"Update the dependencies array to be: [currency, fetchCoins]",{"range":"138","text":"139"},"Update the dependencies array to be: [days, fetchHistoricData]",{"range":"140","text":"141"},[1929,1931],"[fetchCoin]",[1216,1226],"[currency, fetchTrendingCoins]",[1493,1503],"[currency, fetchCoins]",[1417,1423],"[days, fetchHistoricData]"]